# Docker Compose configuration for Ollama WebUI
# Supports both development and production environments

version: '3.8'

# Define custom networks for better security
networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  db:
    driver: bridge

# Define named volumes for persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_staticfiles:
    driver: local
  backend_media:
    driver: local

services:
  # PostgreSQL Database (recommended for production)
  db:
    image: postgres:15-alpine
    container_name: ollama-webui-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-ollama_webui}
      POSTGRES_USER: ${POSTGRES_USER:-ollama_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_me_in_production}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD:-trust}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - db
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ollama_user}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ollama-webui-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-change_me_in_production}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-change_me_in_production}
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  # Backend service (Django REST framework)
  backend:
    container_name: ollama-webui-backend
    build: 
      context: ./backend
      target: development  # Use development stage by default
      args:
        # Corporate environment support
        - INSTALL_CA_CERTS=${INSTALL_CA_CERTS:-false}
        - CA_CERTS_PATH=${CA_CERTS_PATH:-}
        - PYTHON_VERSION=${PYTHON_VERSION:-3.11}
    environment:
      # Django settings
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      
      # Database configuration
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ollama_user}:${POSTGRES_PASSWORD:-change_me_in_production}@db:5432/${POSTGRES_DB:-ollama_webui}
      
      # Redis configuration
      - REDIS_URL=redis://:${REDIS_PASSWORD:-change_me_in_production}@redis:6379/0
      
      # Superuser configuration
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME:-admin}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD:-admin}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL:-admin@example.com}
      
      # External service configuration
      - OLLAMA_ENDPOINT=${OLLAMA_ENDPOINT:-http://host.docker.internal:11434}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_ENDPOINT=${OPENAI_ENDPOINT:-}
      - OPENAI_ORGANIZATION_ID=${OPENAI_ORGANIZATION_ID:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - ANTHROPIC_ENDPOINT=${ANTHROPIC_ENDPOINT:-}
      - AZURE_API_KEY=${AZURE_API_KEY:-}
      - AZURE_ENDPOINT=${AZURE_ENDPOINT:-}
      - AZURE_ORGANIZATION_ID=${AZURE_ORGANIZATION_ID:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      - GOOGLE_ENDPOINT=${GOOGLE_ENDPOINT:-}
      
      # Security settings
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,backend}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:4200,http://localhost:5073}
    env_file:
      - .env
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-6969}:6969"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      # Development volumes (comment out for production)
      - ./backend/api:/app/api:cached
      - ./backend/features:/app/features:cached
      - ./backend/settings:/app/settings:cached
      - backend_staticfiles:/app/staticfiles
      - backend_media:/app/media
    networks:
      - backend
      - db
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6969/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Frontend service (React with Bun)
  frontend:
    container_name: ollama-webui-frontend
    build:
      context: ./frontend
      target: development  # Use development stage by default
      args:
        # Corporate environment support
        - INSTALL_CA_CERTS=${INSTALL_CA_CERTS:-false}
        - CA_CERTS_PATH=${CA_CERTS_PATH:-}
                 - BUN_VERSION=${BUN_VERSION:-1}
        # Environment variables
        - VITE_APP_BACKEND_API_URL=${VITE_APP_BACKEND_API_URL:-http://localhost:6969}
        - VITE_APP_APP_URL=${VITE_APP_APP_URL:-http://localhost:4200}
        - VITE_APP_BACKEND_API_VERSION=${VITE_APP_BACKEND_API_VERSION:-api/v1/}
    environment:
      - VITE_APP_BACKEND_API_URL=${VITE_APP_BACKEND_API_URL:-http://localhost:6969}
      - VITE_APP_APP_URL=${VITE_APP_APP_URL:-http://localhost:4200}
      - VITE_APP_BACKEND_API_VERSION=${VITE_APP_BACKEND_API_VERSION:-api/v1/}
      # Development settings
      - CHOKIDAR_USEPOLLING=${CHOKIDAR_USEPOLLING:-true}
      - WATCHPACK_POLLING=${WATCHPACK_POLLING:-true}
    ports:
      - "${FRONTEND_PORT:-4200}:4200"
    volumes:
      # Development volumes (comment out for production)
      - ./frontend/src:/app/src:cached
      - ./frontend/index.html:/app/index.html:cached
      - ./frontend/vite.config.ts:/app/vite.config.ts:cached
      - ./frontend/tsconfig.json:/app/tsconfig.json:cached
      - ./frontend/tailwind.config.js:/app/tailwind.config.js:cached
    networks:
      - frontend
    restart: unless-stopped
    develop:
      watch:
        - path: frontend/src/
          target: /app/src
          action: sync
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4200/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Nginx reverse proxy
  proxy:
    container_name: ollama-webui-proxy
    build: 
      context: ./proxy
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "${PROXY_HTTP_PORT:-5073}:5073"
    networks:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5073/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 15s

# Development override (optional)
# Use: docker-compose -f compose.yaml -f compose.dev.yaml up
# This allows for easy switching between dev and prod configurations
