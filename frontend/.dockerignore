# Development tests aren't needed in the container
**/tests
# Documentation has no reason to be in the container
**/docs 

# Node should be built from scratch inside the container
# See https://stackoverflow.com/a/67431349 for the reason why
node_modules
node_modules/*
**/node_modules
/node_modules

package-lock.json

# No need to send this to the container
env.dist

# Don't want to send the env variables to the container
# .env
# Dont need to send the database
.db

# We don't need to send linting config files to the container
.eslintrc.cjs

# No reason to send a gitignore to the container
.gitignore

# Version control
.git
.gitignore
.gitattributes

# Documentation
README.md
docs/
*.md

# Dependencies (will be installed in container)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Build outputs
dist/
build/
.output/
.nuxt/
.next/
out/

# Testing
coverage/
.nyc_output
.coverage
*.lcov

# IDEs
.vscode/
.idea/
*.swp
*.swo
*~

# OS files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Environment files
.env.local
.env.development.local
.env.test.local
.env.production.local
.env.example

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Optional npm cache directory
.npm

# Temporary files
*.tmp
*.temp
tmp/
temp/

# Parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Storybook build outputs
.out
.storybook-out

# Docker files
Dockerfile*
.dockerignore
docker-compose*.yml
compose*.yaml

# Tailwind
src/style/output.css